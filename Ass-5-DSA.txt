1)
#include <stdio.h>
#include <string.h>

#define MAX 100	

int top=-1;
int item;
char stack_string[MAX];

void pushChar(char item);
char popChar(void);
int isEmpty(void);
int isFull(void);
 
int main()
{
    char str[MAX];
    
    int i;
    
    printf("Input a string: ");
    scanf("%[^\n]s",str); 
    for(i=0;i<strlen(str);i++)
        pushChar(str[i]);
        
    for(i=0;i<strlen(str);i++)
        str[i]=popChar();

    printf("Reversed String is: %s\n",str);
    
    return 0;
}
 
void pushChar(char item)
{
    if(isFull())
    {
        printf("\nStack is FULL !!!\n");
        return;
    }
    
    top=top+1;
    stack_string[top]=item;
}
 
 char popChar()
{
    if(isEmpty())
    {
        printf("\nStack is EMPTY!!!\n");
        return 0;
    }
    item = stack_string[top];
    top=top-1;
    return item;
}
 
int isEmpty()
{
    if(top==-1)
        return 1;
    else
        return 0;
}

int isFull()
{
    if(top==MAX-1)
        return 1;
    else
        return 0;
}


Output:

Input a string: sushma
Reversed String is: amhsus

2)

#include<stdio.h>
char stack[50];
int top = -1;
void push(char x)
{
    stack[++top] = x;
}
 
char pop()
{
    if(top == -1)
        return -1;
    else
        return stack[top--];
}
 
int priority(char x)
{
    if(x == '(')
        return 0;
    if(x == '+' || x == '-')
        return 1;
    if(x == '*' || x == '/')
        return 2;
}
 
main()
{
    char exp[20];
    char *e, x;
    printf("Enter the expression :: ");
    scanf("%s",exp);
    e = exp;
    while(*e != '\0')
    {
        if(isalnum(*e))
            printf("%c",*e);
        else if(*e == '(')
            push(*e);
        else if(*e == ')')
        {
            while((x = pop()) != '(')
                printf("%c", x);
        }
        else
        {
            while(priority(stack[top]) >= priority(*e))
                printf("%c",pop());
            push(*e);
        }
        e++;
    }
    while(top != -1)
    {
        printf("%c",pop());
    }
}
 

OUTPUT:
Enter the expression :: a+b*c
abc*+

Enter the expression :: (a+b)*c+(d-a)
ab+c*da-+

3)

#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

struct Stack {
    int data;
    struct Stack *next;
};


struct Stack *CreateStack () {
    return NULL;
}

int isEmptyStack(struct Stack *top) {
    return (top == NULL);
}

void Push(struct Stack **top, int data) {
    struct Stack *newNode = (struct Stack*) malloc(sizeof(struct Stack));
    if(!newNode)
        return;
    newNode->data = data;
    newNode->next = *top;
    *top = newNode;
}

int Pop(struct Stack **top) {
    struct Stack *temp;
    int data;

    if(isEmptyStack(*top)) {
        printf("Empty Stack.\n");
        return INT_MIN;
    }

    temp = *top;
    data = (*top)->data;
    *top = (*top)->next;
    free(temp);
    return data;
}

struct Queue {
    struct Stack *S1;
    struct Stack *S2;
};

struct Queue *CreateQueue() {
    return NULL;
}

void EnQueue(struct Queue *Q, int data) {
    Push(Q->S1, data);
}

int DeQueue(struct Queue *Q) {
    if(!isEmptyStack(Q->S2)) {
        return Pop(Q->S2);
    }
    else {
        while(!isEmptyStack(Q->S1)) {
            Push(Q->S2, Pop(Q->S1));
        }
        return Pop(Q->S2);
    }
}

int main() {
    struct Queue *Q = CreateQueue();
    Q->S1 = Q->S2 = NULL;
    EnQueue(Q, 1);
    EnQueue(Q, 2);
    EnQueue(Q, 3);

    printf("%d ", DeQueue(Q));
    printf("%d ", DeQueue(Q));
    printf("%d ", DeQueue(Q));

    return 0;
}

output:


4)

#include <stdio.h>
#include <stdlib.h>

typedef struct node {
  int data;
  struct node *left;
  struct node *right;
  struct node *parent;
}node;

typedef struct binary_search_tree {
  node *root;
}binary_search_tree;

node* new_node(int data) {
  node *n = malloc(sizeof(node));
  n->data = data;
  n->left = NULL;
  n->right = NULL;
  n->parent = NULL;

  return n;
}

binary_search_tree* new_binary_search_tree() {
  binary_search_tree *t = malloc(sizeof(binary_search_tree));
  t->root = NULL;

  return t;
}

node* minimum(binary_search_tree *t, node *A) {
  while(A->left != NULL)
    A = A->left;
  return A;
}

void insert(binary_search_tree *t, node *n) {
  node *B = NULL;
  node *temp = t->root;
  while(temp != NULL) {
    B = temp;
    if(n->data < temp->data)
      temp = temp->left;
    else
      temp = temp->right;
  }
  n->parent = B;

  if(B == NULL) //newly added node is root
    t->root = n;
  else if(n->data < B->data)
    B->left = n;
  else
    B->right = n;
}

void transplant(binary_search_tree *t, node *u, node *v) {
  if(u->parent == NULL) //u is root
    t->root = v;
  else if(u == u->parent->left) //u is left child
    u->parent->left = v;
  else //u is right child
    u->parent->right = v;

  if(v != NULL)
    v->parent = u->parent;
}

void delete(binary_search_tree *t, node *C) {
  if(C->left == NULL) {
    transplant(t, C, C->right);
    free(C);
  }
  else if(C->right == NULL) {
    transplant(t, C, C->left);
    free(C);
  }
  else {
    node *B = minimum(t, C->right); //minimum element in right subtree
    if(B->parent != C) {
      transplant(t, B, B->right);
      B->right = C->right;
      B->right->parent = B;
    }
    transplant(t, C, B);
    B->left = C->left;
    B->left->parent = B;
    free(C);
  }
}

void inorder(binary_search_tree *t, node *n) {
  if(n != NULL) {
    inorder(t, n->left);
    printf("%d\n", n->data);
    inorder(t, n->right);
  }
}

int main() {
  binary_search_tree *t = new_binary_search_tree();

  node *a, *b, *c, *d, *e, *f, *g, *h, *i, *j, *k, *l, *m;

  a = new_node(10);
  b = new_node(20);
  c = new_node(30);
  d = new_node(100);
  e = new_node(90);
  f = new_node(40);
  g = new_node(50);
  h = new_node(60);
  i = new_node(70);
  j = new_node(80);
  k = new_node(150);
  l = new_node(110);
  m = new_node(120);

  insert(t, a);
  insert(t, b);
  insert(t, c);
  insert(t, d);
  insert(t, e);
  insert(t, f);
  insert(t, g);
  insert(t, h);
  insert(t, i);
  insert(t, j);
  insert(t, k);
  insert(t, l);
  insert(t, m);

  delete(t, a);
  delete(t, m);

  inorder(t, t->root);

  return 0;
}

output:
20
30
40
50
60
70
80
90
100
110
150
